from sklearn.linear_model import LogisticRegression
import pickle
import os
import numpy as np


def train():
	per_feature_matrix = None
	api_feature_matrix = None
	if os.path.exists('dataset/per_feature_matrix'):
		per_feature_matrix = pickle.load(open('dataset/per_feature_matrix', 'rb'))
	if os.path.exists('dataset/api_feature_matrix'):
		api_feature_matrix = pickle.load(open('dataset/api_feature_matrix', 'rb'))
	classification = pickle.load(open('dataset/classification', 'rb'))
	if per_feature_matrix is not None and api_feature_matrix is not None:
		feature_matrix = __concatenate(per_feature_matrix, api_feature_matrix)
	elif per_feature_matrix:
		feature_matrix = per_feature_matrix
	elif api_feature_matrix:
		feature_matrix = api_feature_matrix
	else:
		return
	model = LogisticRegression()
	model.fit(feature_matrix, classification)
	pickle.dump(model, open('dataset/model', 'wb'))  # 固化训练结果


def __concatenate(a, b):
	"""

	:param a: ndarray
	:param b: ndarray
	:return: ndarray
	"""
	feature_matrix = np.zeros(shape=(len(a), len(a[0]) + len(b[0])))  # 特征矩阵，目测是稀疏矩阵，暂时使用numpy array

	for i in range(len(a)):
		for j in range(len(a[0])):
			feature_matrix[i][j] = a[i][j]
		for j in range(len(b[0])):
			feature_matrix[i][j + len(a[0])] = b[i][j]
	return feature_matrix
