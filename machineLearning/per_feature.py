__author__ = 'hanze'
import xml.etree.ElementTree as ET
import os
import numpy as np


class PermissionExtraction:
	def __init__(self, path):
		self.path = path  # 反编译后的apps目录
		self.manifest = dict()  # 所有manifest文件目录 appName->appPath
		self.app = dict()  # 应用编号，便于管理 app->No.
		self.app2permission = dict()  # 每个应用的权限集合 appNo->appPermissions
		self.permission = dict()  # 权限编号，便于管理  permission->No.
		self.permissionCount = dict()  # 每个权限出现的个数 permission->count

	def run(self):
		"""开始执行以下功能
		"""
		ben_app_num = self.__find_all_manifest('ben_code/')
		mal_app_num = self.__find_all_manifest('mal_code/')
		self.__all_permission()
		self.__count_permission()
		matrix = self.__feature_matrix()  # 特征矩阵
		classification = np.ones((ben_app_num + mal_app_num,), dtype=np.int)  # 分类结果
		for i in range(ben_app_num):
			classification[i]=0
		return matrix, classification

	def __find_all_manifest(self, dir):
		"""找到目录中所有的AndroidManifest.xml文件
		"""
		count0 = count = len(self.manifest)
		cur_path = os.path.join(self.path, dir)
		for files in os.listdir(cur_path):
			xml_path = os.path.join(cur_path, files + '/AndroidManifest.xml')
			if os.path.exists(xml_path):
				self.manifest[files] = xml_path
				self.app[files] = count
				count += 1
		return count - count0

	def __all_permission(self):
		"""找到所有应用具有的权限,保存在app2permisison变量中
		"""
		android = '{http://schemas.android.com/apk/res/android}'
		for files in self.manifest:
			root = ET.parse(self.manifest[files]).getroot()
			appNo = self.app[files]
			if self.app2permission.get(appNo) is None:
				self.app2permission[appNo] = list()
			# 找到uses-permission label
			for item in root.iter('uses-permission'):
				# 记录在app2permission里
				self.app2permission[appNo].append(item.get(android + 'name'))

	def __count_permission(self):
		"""计算所有权限出现的次数
		"""
		count = 0
		for app_no in self.app2permission:
			for p in self.app2permission[app_no]:
				if self.permissionCount.get(p) is None:
					self.permissionCount[p] = 1
				else:
					self.permissionCount[p] += 1
				if self.permission.get(p) is None:
					self.permission[p] = count
					count += 1

	def __feature_matrix(self):
		"""构建特征矩阵
		"""
		matrix = np.zeros(shape=(len(self.manifest), len(self.permission)))  # 特征矩阵，目测是稀疏矩阵，暂时使用numpy array
		for i in range(len(self.manifest)):
			for itemOfPermission in self.app2permission[i]:
				j = self.permission[itemOfPermission]  # 权限编号
				matrix[i][j] = 1
		return matrix


if __name__ == '__main__':
	p = PermissionExtraction()
	p.start()
