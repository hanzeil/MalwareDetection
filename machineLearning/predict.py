import os
import pickle
from infoExtract import permission, api
import numpy as np


def run(filename, out_path):
	decode_path = os.path.join(out_path, filename[:-4])
	cmd = 'apktool d ' + out_path + filename + ' -o ' + decode_path;
	os.system(cmd)  # decode apk
	if os.path.exists(os.path.join(decode_path, "AndroidManifest.xml")) is False:
		return "该应用设有防止反编译机制，无法反编译，请换一个应用"
	all_permission = permission.run(decode_path)  # return all permission needed
	all_api = api.run(decode_path)  # return all sensitive api called
	''' 加载训练模型
	'''
	model = pickle.load(open('dataset/model', 'rb'))
	permission_coding = None
	api_coding = None
	if os.path.exists('dataset/permission_coding'):
		permission_coding = pickle.load(open('dataset/permission_coding', 'rb'))
	if os.path.exists('dataset/api_coding'):
		api_coding = pickle.load(open('dataset/api_coding', 'rb'))
	'''构造该应用的特征向量
	'''
	feature_vector = None
	if permission_coding and api_coding:
		feature_vector = np.zeros(len(permission_coding) + len(api_coding))
		for key in all_permission:
			if permission_coding.get(key):
				feature_vector[permission_coding[key]] = 1
		for key in all_api:
			if api_coding.get(key):
				feature_vector[api_coding[key] + len(permission_coding)] = 1
	elif permission_coding:
		feature_vector = np.zeros(len(permission_coding))
		for key in all_permission:
			if permission_coding.get(key):
				feature_vector[permission_coding[key]] = 1
	elif api_coding:
		feature_vector = np.zeros(len(api_coding))
		for key in all_api:
			if api_coding.get(key):
				feature_vector[api_coding[key]] = 1
	''' 预测
	'''
	expect = model.predict(feature_vector)
	if expect == 1:
		result = "This application is a malicious application"
	else:
		result = "This application is a benign application"
	return all_permission, all_api, result
