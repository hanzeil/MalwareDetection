import os

from flask import Flask, request, redirect, url_for, render_template

from infoExtract import permission, api
from machineLearning import feature_matrix, decode, ml
import pickle
import numpy as np

UPLOAD_FOLDER = '/srv/http/uploads/'
ALLOWED_EXTENSIONS = set(['apk', 'APK'])

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
apks_path = "/srv/http/apks/"


def allowed_file(filename):
	return '.' in filename and filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS


@app.route('/', methods=['GET'])
def index():
	return render_template('index.html', apks_path=apks_path)
android.permission.ACCESS_NETWORK_STATE	获取网络状态
android.permission.WAKE_LOCK	唤醒锁定
android.permission.READ_PHONE_STATE	读取电话状态
android.permission.VIBRATE	使用振动
android.permission.INTERNET	访问网络
android.permission.READ_LOGS	读取系统日志
android.permission.ACCESS_FINE_LOCATION	获取精确位置

@app.route('/', methods=['POST'])
def upload():
	if request.files.get('file'):
		file = request.files['file']
		print(file.filename)
		if file and allowed_file(file.filename):
			file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
			return redirect(url_for('uploaded_file', filename=file.filename))
		return "上传文件必须为APK"
	elif request.values.get('apks_path'):
		global apks_path
		apks_path = request.values.get('apks_path')
		print(apks_path)
		return render_template('index.html', apks_path=apks_path)
	elif request.values.get('decoding'):
		return redirect(url_for('decoding'))
	elif request.values.get('per_extract'):
		return redirect(url_for('per_extract'))
	elif request.values.get('api'):
		return '搭建中'
	elif request.values.get('training'):
		return redirect(url_for('training'))
	return 'Error 400 Bad Request'


@app.route('/uploads/<filename>')
def uploaded_file(filename):
	out_path = app.config['UPLOAD_FOLDER']
	decode_path = os.path.join(out_path, filename[:-4])
	cmd = 'apktool d ' + out_path + filename + ' -o ' + decode_path;
	os.system(cmd)  # decode apk
	if os.path.exists(os.path.join(decode_path,"AndroidManifest.xml")) is not True:
		return "该应用设有防止反编译机制，无法反编译，请换一个应用"
	all_permission = permission.run(decode_path)  # return all permission needed
	all_api = api.run(decode_path)  # return all api called
	''' 预测
	'''
	model = pickle.load(open('dataset/model', 'rb'))
	permission_coding = pickle.load(open('dataset/permission_coding', 'rb'))
	feature_vector = np.zeros(len(permission_coding))
	for key in all_permission:
		if permission_coding.get(key):
			feature_vector[permission_coding[key]] = 1
	expect = model.predict(feature_vector)
	if expect == 1:
		result = "预测该应用是 恶意应用"
	else:
		result = "预测该应用是 良性应用"
	return render_template('result.html', allpermission=all_permission, allapi=all_api, result=result)


@app.route('/decoding/')
def decoding():
	decode.run(apks_path)
	return render_template('index.html')


@app.route('/per_extract/')
def per_extract():
	feature_matrix.permission(apks_path)
	return "权限特征提取完成"


@app.route('/training')
def training():
	ml.train()
	return '训练结束'


if __name__ == '__main__':
	app.debug = True
	app.run(host='0.0.0.0')
